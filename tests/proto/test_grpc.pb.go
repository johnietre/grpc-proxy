// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.2
// source: tests/proto/test.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestAPIClient is the client API for TestAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestAPIClient interface {
	// Turns lower case string into upper case
	Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
	// Sums numbers
	TestClientStream(ctx context.Context, opts ...grpc.CallOption) (TestAPI_TestClientStreamClient, error)
	// Calculate up to the given fibonacci number
	TestServerStream(ctx context.Context, in *TestServerStreamRequest, opts ...grpc.CallOption) (TestAPI_TestServerStreamClient, error)
	TestBiStream(ctx context.Context, opts ...grpc.CallOption) (TestAPI_TestBiStreamClient, error)
	TestBiAbsUpDown(ctx context.Context, opts ...grpc.CallOption) (TestAPI_TestBiAbsUpDownClient, error)
	TestBiPctUpDown(ctx context.Context, opts ...grpc.CallOption) (TestAPI_TestBiPctUpDownClient, error)
	TestBiPct(ctx context.Context, opts ...grpc.CallOption) (TestAPI_TestBiPctClient, error)
}

type testAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewTestAPIClient(cc grpc.ClientConnInterface) TestAPIClient {
	return &testAPIClient{cc}
}

func (c *testAPIClient) Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, "/test.TestAPI/Test", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testAPIClient) TestClientStream(ctx context.Context, opts ...grpc.CallOption) (TestAPI_TestClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestAPI_ServiceDesc.Streams[0], "/test.TestAPI/TestClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testAPITestClientStreamClient{stream}
	return x, nil
}

type TestAPI_TestClientStreamClient interface {
	Send(*TestClientStreamRequest) error
	CloseAndRecv() (*TestClientStreamResponse, error)
	grpc.ClientStream
}

type testAPITestClientStreamClient struct {
	grpc.ClientStream
}

func (x *testAPITestClientStreamClient) Send(m *TestClientStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testAPITestClientStreamClient) CloseAndRecv() (*TestClientStreamResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TestClientStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testAPIClient) TestServerStream(ctx context.Context, in *TestServerStreamRequest, opts ...grpc.CallOption) (TestAPI_TestServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestAPI_ServiceDesc.Streams[1], "/test.TestAPI/TestServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testAPITestServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestAPI_TestServerStreamClient interface {
	Recv() (*TestServerStreamResponse, error)
	grpc.ClientStream
}

type testAPITestServerStreamClient struct {
	grpc.ClientStream
}

func (x *testAPITestServerStreamClient) Recv() (*TestServerStreamResponse, error) {
	m := new(TestServerStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testAPIClient) TestBiStream(ctx context.Context, opts ...grpc.CallOption) (TestAPI_TestBiStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestAPI_ServiceDesc.Streams[2], "/test.TestAPI/TestBiStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testAPITestBiStreamClient{stream}
	return x, nil
}

type TestAPI_TestBiStreamClient interface {
	Send(*TestBiStreamRequest) error
	Recv() (*TestBiStreamResponse, error)
	grpc.ClientStream
}

type testAPITestBiStreamClient struct {
	grpc.ClientStream
}

func (x *testAPITestBiStreamClient) Send(m *TestBiStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testAPITestBiStreamClient) Recv() (*TestBiStreamResponse, error) {
	m := new(TestBiStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testAPIClient) TestBiAbsUpDown(ctx context.Context, opts ...grpc.CallOption) (TestAPI_TestBiAbsUpDownClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestAPI_ServiceDesc.Streams[3], "/test.TestAPI/TestBiAbsUpDown", opts...)
	if err != nil {
		return nil, err
	}
	x := &testAPITestBiAbsUpDownClient{stream}
	return x, nil
}

type TestAPI_TestBiAbsUpDownClient interface {
	Send(*TestBiStreamRequest) error
	Recv() (*TestBiStreamResponse, error)
	grpc.ClientStream
}

type testAPITestBiAbsUpDownClient struct {
	grpc.ClientStream
}

func (x *testAPITestBiAbsUpDownClient) Send(m *TestBiStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testAPITestBiAbsUpDownClient) Recv() (*TestBiStreamResponse, error) {
	m := new(TestBiStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testAPIClient) TestBiPctUpDown(ctx context.Context, opts ...grpc.CallOption) (TestAPI_TestBiPctUpDownClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestAPI_ServiceDesc.Streams[4], "/test.TestAPI/TestBiPctUpDown", opts...)
	if err != nil {
		return nil, err
	}
	x := &testAPITestBiPctUpDownClient{stream}
	return x, nil
}

type TestAPI_TestBiPctUpDownClient interface {
	Send(*TestBiStreamRequest) error
	Recv() (*TestBiStreamResponse, error)
	grpc.ClientStream
}

type testAPITestBiPctUpDownClient struct {
	grpc.ClientStream
}

func (x *testAPITestBiPctUpDownClient) Send(m *TestBiStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testAPITestBiPctUpDownClient) Recv() (*TestBiStreamResponse, error) {
	m := new(TestBiStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testAPIClient) TestBiPct(ctx context.Context, opts ...grpc.CallOption) (TestAPI_TestBiPctClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestAPI_ServiceDesc.Streams[5], "/test.TestAPI/TestBiPct", opts...)
	if err != nil {
		return nil, err
	}
	x := &testAPITestBiPctClient{stream}
	return x, nil
}

type TestAPI_TestBiPctClient interface {
	Send(*TestBiStreamRequest) error
	Recv() (*TestBiStreamResponse, error)
	grpc.ClientStream
}

type testAPITestBiPctClient struct {
	grpc.ClientStream
}

func (x *testAPITestBiPctClient) Send(m *TestBiStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testAPITestBiPctClient) Recv() (*TestBiStreamResponse, error) {
	m := new(TestBiStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestAPIServer is the server API for TestAPI service.
// All implementations must embed UnimplementedTestAPIServer
// for forward compatibility
type TestAPIServer interface {
	// Turns lower case string into upper case
	Test(context.Context, *TestRequest) (*TestResponse, error)
	// Sums numbers
	TestClientStream(TestAPI_TestClientStreamServer) error
	// Calculate up to the given fibonacci number
	TestServerStream(*TestServerStreamRequest, TestAPI_TestServerStreamServer) error
	TestBiStream(TestAPI_TestBiStreamServer) error
	TestBiAbsUpDown(TestAPI_TestBiAbsUpDownServer) error
	TestBiPctUpDown(TestAPI_TestBiPctUpDownServer) error
	TestBiPct(TestAPI_TestBiPctServer) error
	mustEmbedUnimplementedTestAPIServer()
}

// UnimplementedTestAPIServer must be embedded to have forward compatible implementations.
type UnimplementedTestAPIServer struct {
}

func (UnimplementedTestAPIServer) Test(context.Context, *TestRequest) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedTestAPIServer) TestClientStream(TestAPI_TestClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method TestClientStream not implemented")
}
func (UnimplementedTestAPIServer) TestServerStream(*TestServerStreamRequest, TestAPI_TestServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method TestServerStream not implemented")
}
func (UnimplementedTestAPIServer) TestBiStream(TestAPI_TestBiStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method TestBiStream not implemented")
}
func (UnimplementedTestAPIServer) TestBiAbsUpDown(TestAPI_TestBiAbsUpDownServer) error {
	return status.Errorf(codes.Unimplemented, "method TestBiAbsUpDown not implemented")
}
func (UnimplementedTestAPIServer) TestBiPctUpDown(TestAPI_TestBiPctUpDownServer) error {
	return status.Errorf(codes.Unimplemented, "method TestBiPctUpDown not implemented")
}
func (UnimplementedTestAPIServer) TestBiPct(TestAPI_TestBiPctServer) error {
	return status.Errorf(codes.Unimplemented, "method TestBiPct not implemented")
}
func (UnimplementedTestAPIServer) mustEmbedUnimplementedTestAPIServer() {}

// UnsafeTestAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestAPIServer will
// result in compilation errors.
type UnsafeTestAPIServer interface {
	mustEmbedUnimplementedTestAPIServer()
}

func RegisterTestAPIServer(s grpc.ServiceRegistrar, srv TestAPIServer) {
	s.RegisterService(&TestAPI_ServiceDesc, srv)
}

func _TestAPI_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestAPIServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.TestAPI/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestAPIServer).Test(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestAPI_TestClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestAPIServer).TestClientStream(&testAPITestClientStreamServer{stream})
}

type TestAPI_TestClientStreamServer interface {
	SendAndClose(*TestClientStreamResponse) error
	Recv() (*TestClientStreamRequest, error)
	grpc.ServerStream
}

type testAPITestClientStreamServer struct {
	grpc.ServerStream
}

func (x *testAPITestClientStreamServer) SendAndClose(m *TestClientStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testAPITestClientStreamServer) Recv() (*TestClientStreamRequest, error) {
	m := new(TestClientStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TestAPI_TestServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TestServerStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestAPIServer).TestServerStream(m, &testAPITestServerStreamServer{stream})
}

type TestAPI_TestServerStreamServer interface {
	Send(*TestServerStreamResponse) error
	grpc.ServerStream
}

type testAPITestServerStreamServer struct {
	grpc.ServerStream
}

func (x *testAPITestServerStreamServer) Send(m *TestServerStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TestAPI_TestBiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestAPIServer).TestBiStream(&testAPITestBiStreamServer{stream})
}

type TestAPI_TestBiStreamServer interface {
	Send(*TestBiStreamResponse) error
	Recv() (*TestBiStreamRequest, error)
	grpc.ServerStream
}

type testAPITestBiStreamServer struct {
	grpc.ServerStream
}

func (x *testAPITestBiStreamServer) Send(m *TestBiStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testAPITestBiStreamServer) Recv() (*TestBiStreamRequest, error) {
	m := new(TestBiStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TestAPI_TestBiAbsUpDown_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestAPIServer).TestBiAbsUpDown(&testAPITestBiAbsUpDownServer{stream})
}

type TestAPI_TestBiAbsUpDownServer interface {
	Send(*TestBiStreamResponse) error
	Recv() (*TestBiStreamRequest, error)
	grpc.ServerStream
}

type testAPITestBiAbsUpDownServer struct {
	grpc.ServerStream
}

func (x *testAPITestBiAbsUpDownServer) Send(m *TestBiStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testAPITestBiAbsUpDownServer) Recv() (*TestBiStreamRequest, error) {
	m := new(TestBiStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TestAPI_TestBiPctUpDown_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestAPIServer).TestBiPctUpDown(&testAPITestBiPctUpDownServer{stream})
}

type TestAPI_TestBiPctUpDownServer interface {
	Send(*TestBiStreamResponse) error
	Recv() (*TestBiStreamRequest, error)
	grpc.ServerStream
}

type testAPITestBiPctUpDownServer struct {
	grpc.ServerStream
}

func (x *testAPITestBiPctUpDownServer) Send(m *TestBiStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testAPITestBiPctUpDownServer) Recv() (*TestBiStreamRequest, error) {
	m := new(TestBiStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TestAPI_TestBiPct_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestAPIServer).TestBiPct(&testAPITestBiPctServer{stream})
}

type TestAPI_TestBiPctServer interface {
	Send(*TestBiStreamResponse) error
	Recv() (*TestBiStreamRequest, error)
	grpc.ServerStream
}

type testAPITestBiPctServer struct {
	grpc.ServerStream
}

func (x *testAPITestBiPctServer) Send(m *TestBiStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testAPITestBiPctServer) Recv() (*TestBiStreamRequest, error) {
	m := new(TestBiStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestAPI_ServiceDesc is the grpc.ServiceDesc for TestAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test.TestAPI",
	HandlerType: (*TestAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Test",
			Handler:    _TestAPI_Test_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TestClientStream",
			Handler:       _TestAPI_TestClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "TestServerStream",
			Handler:       _TestAPI_TestServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TestBiStream",
			Handler:       _TestAPI_TestBiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "TestBiAbsUpDown",
			Handler:       _TestAPI_TestBiAbsUpDown_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "TestBiPctUpDown",
			Handler:       _TestAPI_TestBiPctUpDown_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "TestBiPct",
			Handler:       _TestAPI_TestBiPct_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "tests/proto/test.proto",
}
